<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Numerics.Vectors</name>
    </assembly>
    <members>
        <member name="M:System.Numerics.HashCodeHelper.CombineHashCodes(System.Int32,System.Int32)">
            <summary>
            Combines two hash codes, useful for combining hash codes of individual vector elements
            </summary>
        </member>
        <member name="T:System.Numerics.JitIntrinsicAttribute">
            <summary>
            An attribute that can be attached to JIT Intrinsic methods/properties
            </summary>
        </member>
        <member name="T:System.Numerics.Register">
            <summary>
            A structure describing the layout of an SSE2-sized register.
            Contains overlapping fields representing the set of valid numeric types.
            Allows the generic Vector'T struct to contain an explicit field layout.
            </summary>
        </member>
        <member name="T:System.Numerics.SR">
            <summary>
            A static class that encapsulates methods to perform operations on resources file (.resx)
            </summary>
        </member>
        <member name="T:System.Numerics.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.Arg_ArgumentOutOfRangeException">
            <summary>
              Looks up a localized string similar to Index was out of bounds:.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.Arg_ElementsInSourceIsGreaterThanDestination">
            <summary>
              Looks up a localized string similar to Number of elements in source vector is greater than the destination array.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.Arg_MultiDimArrayNotSupported">
            <summary>
              Looks up a localized string similar to Only one-dimensional arrays are supported.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.Arg_RegisterLengthOfRangeException">
            <summary>
              Looks up a localized string similar to length must be less than.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.Arg_TypeNotSupported">
            <summary>
              Looks up a localized string similar to Specified type is not supported.
            </summary>
        </member>
        <member name="P:System.Numerics.Strings.Reflection_MethodNotSupported">
            <summary>
              Looks up a localized string similar to Vector&lt;T&gt;.Length cannot be called via reflection when intrinsics are enabled..
            </summary>
        </member>
        <member name="T:System.Numerics.Vector`1">
            <summary>
            1. A structure that represents a single Vector. The count of this Vector is fixed but CPU register dependent.
            In other words, this struct abstracts a SIMD register. Number of elements is sizeof(simd-register)/sizeof(T).
            2. This struct only supports numerical types. This type is intended to be used as a building block for vectorizing
            large algorithms.
            3. All operations on this Vector are size independent. The Count property is populated by JIT and all operations defined
            in this struct are based on Count. The only place we should care about lenght is during initializations and indexing 
            4. Methods, properties, fields marked as JIT intrinsics would be replaced by JIT as SIMD intrinsics.
            5. We don't care about alignment for now. First of all, modern hardware doesn’t impose as large an alignment penalty 
            as used to be the case. Secondly, stack alignment is guaranteed by the JIT and field alignment is something we’ve 
            specifically scoped out as this would require major changes to the VM. 
             6. This type is immutable, individual elements cannot be modified.
            </summary>
        </member>
        <member name="M:System.Numerics.Vector`1.#ctor(`0)">
            <summary>
            Constructs a vector whose components are all <code>value</code>
            </summary>
        </member>
        <member name="M:System.Numerics.Vector`1.#ctor(`0[])">
            <summary> 
            Constructs a vector from the given array. The size of the given array must be at least Vector'T.Count.
            </summary>
        </member>
        <member name="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
            <summary> 
            Constructs a vector from the given array, starting from the given index. 
            The array must contain at least Vector'T.Count from the given index.
            </summary>
        </member>
        <member name="M:System.Numerics.Vector`1.CopyTo(`0[])">
            <summary> 
            Copies the vector to the given destination array. The destination array must be at least size Vector'T.Count.
            </summary>
            <param name="destination">The destination array which the values are copied into</param>
            <exception cref="T:System.ArgumentNullException">If the destination array is null</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array</exception>
        </member>
        <member name="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
            <summary> 
            Copies the vector to the given destination array. The destination array must be at least size Vector'T.Count.
            </summary>
            <param name="destination">The destination array which the values are copied into</param>
            <param name="startIndex">The index to start copying to</param>
            <exception cref="T:System.ArgumentNullException">If the destination array is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is greater than end of the array or index is less than zero</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array</exception>
        </member>
        <member name="P:System.Numerics.Vector`1.Zero">
            <summary> 
            Returns a vector containing all zeroes. 
            </summary>
        </member>
        <member name="P:System.Numerics.Vector`1.One">
            <summary> 
            Returns a vector containing all ones. 
            </summary>
        </member>
        <member name="P:System.Numerics.Vector`1.Item(System.Int32)">
            <summary> 
            Returns the element at the given index.
            </summary>
        </member>
        <member name="T:System.Numerics.Vector2">
            <summary>
            A structure that encapsulates two single precision floating point values and provides hardware accelerated methods.
            Vector 2f would be a JIT intrinsic.
            We don't support comparison operators or bitwise operators on fixed vector types
            </summary>
        </member>
        <member name="M:System.Numerics.Vector2.#ctor(System.Single)">
            <summary>
            Initialize each component to same value
            </summary>
            <param name="value">initialization value</param>
        </member>
        <member name="M:System.Numerics.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initialize each component of the vector
            </summary>
            <param name="x">X component</param>
            <param name="y">Y component</param>
        </member>
        <member name="M:System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)">
            <summary>
            this will eventually be a JIT intrinsic
            </summary>
            <exception cref="T:System.ArgumentNullException">If array is null</exception>
            <exception cref="T:System.RankException">If array is multidimensional</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is greater than end of the array or index is less than zero</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array
            or if there are not enough elements to copy</exception>
        </member>
        <member name="T:System.Numerics.Vector3">
            <summary>
            A structure that encapsulates three single precision floating point values and provides hardware accelerated methods.
            We don't support comparison operators or bitwise operators on fixed vector types
            </summary>
        </member>
        <member name="M:System.Numerics.Vector3.#ctor(System.Single)">
            <summary>
            This constructor initialized each component to the same value
            </summary>
        </member>
        <member name="M:System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initialize each vector component
            </summary>
            <param name="x">X component</param>
            <param name="y">Y component</param>
            <param name="z">Z component</param>
        </member>
        <member name="M:System.Numerics.Vector3.CopyTo(System.Single[])">
            <summary>
            Copies the contents of the vector into the given array
            </summary>
        </member>
        <member name="M:System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)">
            <summary>
            Copies the contents of the vector into the given array, starting from index
            </summary>
            <exception cref="T:System.ArgumentNullException">If array is null</exception>
            <exception cref="T:System.RankException">If array is multidimensional</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is greater than end of the array or index is less than zero</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array</exception>
        </member>
        <member name="T:System.Numerics.Vector4">
            <summary>
            A structure that encapsulates four single precision floating point values and provides hardware accelerated methods.
            Vector 4f would be a JIT intrinsic. 
            We don't support comparison operators or bitwise operators on fixed vector types
            </summary>
        </member>
        <member name="M:System.Numerics.Vector4.#ctor(System.Single)">
            <summary>
            This constructor initializes each component to same value
            </summary>
        </member>
        <member name="M:System.Numerics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initialize each component of the vector
            </summary>
            <param name="w">W component</param>
            <param name="x">X component</param>
            <param name="y">Y conponent</param>
            <param name="z">Z component</param>
        </member>
        <member name="M:System.Numerics.Vector4.CopyTo(System.Single[],System.Int32)">
            <summary>
            this will eventually be a JIT intrinsic
            </summary>
            <exception cref="T:System.ArgumentNullException">If array is null</exception>
            <exception cref="T:System.RankException">If array is multidimensional</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is greater than end of the array or index is less than zero</exception>
            <exception cref="T:System.ArgumentException">If number of elements in source vector is greater than those available in destination array</exception>
        </member>
        <member name="T:System.Numerics.Vector">
            <summary>
            This class includes the Conditional Select and Comparison methods
            Putting these methods in an non-generic class allows the compiler to infer types
            Also, these operations operate over multiple types and there might not be a logical home for them.
            Having them in a single type allows better grouping than multiple types. It's a lot easier for the
            developer if they appear as overloads on a single type as opposed to having to hunt down their
            location.
            </summary>
        </member>
    </members>
</doc>
